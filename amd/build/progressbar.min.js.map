{"version":3,"sources":["../src/progressbar.js"],"names":["showInfo","event","cell","container","closest","visibleinfo","siblings","infotoshow","data","is","hide","show","preventDefault","showAllInfo","initialinfo","viewActivity","infolink","find","document","location","prop","scrollContainer","barrow","amount","checkArrows","barcontainer","leftarrow","rightarrow","scrolled","scrollWidth","dir","css","setupScroll","barcontainers","barrows","nowicons","each","nowicon","offset","left","width","on","window","resize","initialiseBar","instanceid","click","setupBar","instanceids","i","length","init","uniqueid","Selectors","bulkActionSelect","bulkUserSelectedCheckBoxes","checkCountButton","showCountText","showCountToggle","stateHelpIcon","tableForm","uniqueId","el","querySelector","addEventListener","DynamicTable","Events","tableContentRefreshed"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Completion Progress block progress bar behaviour.\n *\n * @module     block_completion_progress/progressbar\n * @package    block_completion_progress\n * @copyright  2020 Jonathon Fowler <fowlerj@usq.edu.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as DynamicTable from 'core_table/dynamic';\nimport $ from 'jquery';\n        /**\n         * Show progress event information for a cell.\n         * @param {Event} event\n         */\n        function showInfo(event) {\n            var cell = $(this);\n            var container = cell.closest('.block_completion_progress .barContainer');\n            var visibleinfo = container.siblings('.progressEventInfo:visible');\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\n\n            if (!visibleinfo.is(infotoshow)) {\n                visibleinfo.hide();\n                infotoshow.show();\n            }\n\n            event.preventDefault();\n        }\n\n        /**\n         * Show all progress event information (for accessibility).\n         * @param {Event} event\n         */\n        function showAllInfo(event) {\n            var initialinfo = $(this).closest('.progressEventInfo');\n\n            initialinfo.siblings('.progressEventInfo').show();\n            initialinfo.hide();\n\n            event.preventDefault();\n        }\n\n        /**\n         * Navigate to a cell's activity location.\n         */\n        function viewActivity() {\n            var cell = $(this);\n            var container = cell.closest('.block_completion_progress .barContainer');\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\n            var infolink = infotoshow.find('a.action_link');\n            document.location = infolink.prop('href');\n        }\n\n        /**\n         * Scroll the bar corresponding to the arrow clicked.\n         * @param {Event} event\n         */\n        function scrollContainer(event) {\n            var barrow = $(this).closest('.block_completion_progress .barContainer').find('.barRow');\n            var amount = event.data * barrow.prop('scrollWidth') * 0.15;\n\n            barrow.prop('scrollLeft', barrow.prop('scrollLeft') + amount);\n\n            event.preventDefault();\n        }\n\n        /**\n         * Show or hide the scroll arrows based on the visible position.\n         */\n        function checkArrows() {\n            var threshold = 10;\n            var barrow = $(this);\n            var barcontainer = barrow.closest('.block_completion_progress .barContainer');\n            var leftarrow = barcontainer.find('.left-arrow-svg');\n            var rightarrow = barcontainer.find('.right-arrow-svg');\n            var scrolled = barrow.prop('scrollLeft');\n            var scrollWidth = barrow.prop('scrollWidth') - barrow.prop('offsetWidth');\n\n            if (document.dir === 'rtl') {\n                scrolled = -scrolled;\n\n                if (scrolled > threshold) {\n                    rightarrow.css('display', 'block');\n                } else {\n                    rightarrow.css('display', 'none');\n                }\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\n                    leftarrow.css('display', 'block');\n                } else {\n                    leftarrow.css('display', 'none');\n                }\n            } else {\n                if (scrolled > threshold) {\n                    leftarrow.css('display', 'block');\n                } else {\n                    leftarrow.css('display', 'none');\n                }\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\n                    rightarrow.css('display', 'block');\n                } else {\n                    rightarrow.css('display', 'none');\n                }\n            }\n        }\n\n        /**\n         * Prepare scroll mode behaviour.\n         * @param {jQuery} barcontainers there could be many nodes here in overview mode\n         */\n        function setupScroll(barcontainers) {\n            var barrows = barcontainers.find('.barRow');\n\n            // On page load, place the 'now' marker in the centre of the scrolled bar\n            // and adjust which arrows should be visible.\n            $(function() {\n                var nowicons = barcontainers.find('.nowicon');\n                nowicons.each(function() {\n                    var nowicon = $(this);\n                    var barrow = nowicon.closest('.block_completion_progress .barRow');\n\n                    barrow.prop('scrollLeft', 0);\n                    barrow.prop('scrollLeft', nowicon.offset().left - barrow.offset().left -\n                        barrow.width() / 2);\n                });\n\n                barrows.each(checkArrows);\n            });\n\n            barcontainers.on('click', '.left-arrow-svg', -1, scrollContainer);\n            barcontainers.on('click', '.right-arrow-svg', 1, scrollContainer);\n\n            barrows.on('scroll', checkArrows);\n            $(window).resize(function() {\n                barrows.each(checkArrows);\n            });\n        }\n\n        /**\n         * Set up event handlers for a particular progress bar instance.\n         * @param {integer} instanceid the bar instance id\n         */\n        function initialiseBar(instanceid) {\n            var barcontainers = $('.block_completion_progress ' +\n                '.barContainer[data-instanceid=\"' + instanceid + '\"]');\n\n            // Show information elements on hover or tap.\n            barcontainers.on('touchstart mouseover', '.progressBarCell', showInfo);\n\n            // Navigate to the activity when its cell is clicked.\n            barcontainers.on('click', '.progressBarCell[data-haslink=true]', viewActivity);\n\n            // Show all information elements when the 'show all' link is clicked.\n            barcontainers.siblings('.progressEventInfo').find('.progressShowAllInfo').click(showAllInfo);\n\n            setupScroll(barcontainers);\n        }\n\n        function setupBar(instanceids) {\n          for (var i = instanceids.length - 1; i >= 0; i--) {\n              initialiseBar(instanceids[i]);\n          }\n        }\n            /**\n             * Initialise progress bar instances.\n             * @param {array} instanceids an array of progress bar instance ids\n             */\n            export const init = (instanceids, uniqueid) => {\n              if (uniqueid) {\n                const Selectors = {\n                    bulkActionSelect: \"#formactionid\",\n                    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\n                    checkCountButton: \"#checkall\",\n                    showCountText: '[data-region=\"participant-count\"]',\n                    showCountToggle: '[data-action=\"showcount\"]',\n                    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n                    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n                };\n                const el = document.querySelector(Selectors.tableForm(uniqueid));\n                setupBar(instanceids);\n                el.addEventListener(DynamicTable.Events.tableContentRefreshed, function(){\n                  setupBar(instanceids);\n                },false);\n              } else {\n                setupBar(instanceids);\n              }\n            };\n"],"file":"progressbar.min.js"}